name: test
on:
  push:
    paths-ignore:
      - "**.md"
      - "hack/**"
  pull_request:
    paths-ignore:
      - "**.md"
      - "hack/**"

jobs:
  lint:
    name: "Lint"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: latest

  test:
    name: "Unit Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16
      - uses: actions/cache@v2
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      - name: Unit test
        run: make test

  e2e:
    name: "End to End Test"
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      
      - name: Set up Go 1.16
        uses: actions/setup-go@v2
        with:
          go-version: 1.16

      - name: Setup buildx instance
        uses: docker/setup-buildx-action@v1
        with:
          use: true
      - uses: actions/cache@v2
        with:
          key: ${{ runner.OS }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
      - uses: crazy-max/ghaction-github-runtime@v1
      - name: Build controller
        run: make docker-build CACHE_FROM=type=gha,scope=eraser-manager CACHE_TO=type=gha,scope=eraser-manager,mode=max

      - name: Build eraser
        run: make docker-build-eraser CACHE_FROM=type=gha,scope=eraser-node CACHE_TO=type=gha,scope=eraser-node,mode=max

      - name: Pull test image
        run: docker pull hello-world

      - name: Create k8s Kind Cluster
        uses: helm/kind-action@v1.2.0
        with:
          cluster_name: "e2e-cluster"
          config: .github/workflows/kind-config.yaml
      - run: kubectl get pod -A
      - run: kubectl get nodes -A

      - name: Load controller and eraser image on the nodes of the cluster
        run: |
          kind load docker-image aldaircoronel/eraser-manager:test --name e2e-cluster
          kind load docker-image aldaircoronel/eraser:test --name e2e-cluster
          kind load docker-image hello-world:latest --name e2e-cluster

      - name: Sleep for 30 seconds
        run: sleep 30s
        shell: bash

      - name: Generate manifests
        run: make generate manifests

      - name: Deploy images
        run: make deploy

      - name: Get list of images from control-plane node
        run: docker exec e2e-cluster-control-plane ctr -n k8s.io images list

      - name: Deploy eraser_e2e_imagelist.yaml
        run: kubectl apply -f config/samples/eraser_e2e_imagelist.yaml

      - name: Sleep for 15 seconds
        run: sleep 15s
        shell: bash

      - name: Get image list
        run: kubectl get imagelist -A

      - name: Sleep for 15 seconds
        run: sleep 15s
        shell: bash
        
      - name: Get image job
        run: kubectl get imagejob -A

      - name: Get pods
        run: kubectl get pod -A
      
      - name: Sleep for 30 seconds
        run: sleep 30s
        shell: bash

      - name: Check if pods are scheduled on all nodes
        run: |
        cat << 'EOF' >> checkifpodfitnode.sh
        #!/bin/bash
        $(kubectl get events -n eraser-system --field-selector involvedObject.name=$1 >> outputevent.txt)

        if grep -q "fits the node" outputevent.txt; then
            echo "Pod fit"
            rm outputevent.txt
            exit 0
        else
            echo "Pod did not fit"
            rm outputevent.txt
            exit 1
        fi
        EOF

        chmod u+x checkifpodfitnode.sh
        ./checkifpodfitnode

      # - name: Check if pods are complete
      #   run: 